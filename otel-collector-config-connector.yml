receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
  otlp/metrics:
    protocols:
      http:
        endpoint: "0.0.0.0:4318"

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"

  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/opensearchexporter
  # opensearch/trace:
  #   http:
  #     endpoint: https://opensearch:9200
  #     auth:
  #       authenticator: basicauth/client
  #     tls:
  #       # insecure: true
  #       insecure_skip_verify: true
  #   dataset: "logs"
  #   namespace: "youtoo"
  #   logs_index: "otel-traces"

extensions:
  # basicauth/client: # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
  #   client_auth:
  #     username: "admin"
  #     password: "yourStrongPassword123!"

connectors:
  spanmetrics:

processors:
  batch:

service:
  extensions: [
    # basicauth/client
  ]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/jaeger]

    traces/spanmetrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [spanmetrics]

    # traces/opensearch:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [opensearch/trace]

    metrics/prometheus:
      receivers: [otlp/metrics]
      processors: [batch]
      exporters: [prometheus]

    # The metrics pipeline receives generated span metrics from 'spanmetrics' connector
    # and pushes to Prometheus exporter, which makes them available for scraping on :8889.
    metrics/spanmetrics:
      receivers: [spanmetrics]
      exporters: [prometheus]
