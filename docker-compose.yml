services:
  fluentbit:
    image: cr.fluentbit.io/fluent/fluent-bit:3.2.1
    container_name: fluentbit
    volumes:
      - ./fluentbit-config:/fluent-bit/config:ro
      - ./logs:/var/log/youtoo:ro
    ports:
      - "5170:5170"
      - "2020:2020"
      - "24224:24224"
    command: >
      /fluent-bit/bin/fluent-bit
      -c /fluent-bit/config/fluent-bit.conf
      # -Z --trace="input=tail.0 output=stdout output.format=json_lines"
    depends_on:
      - seq-input-gelf
      # - opensearch
    networks:
      app-network:
        # This is the host name used in FluentBit scrape configuration.
        aliases: [fluentbit]

  # opensearch:
  #   image: opensearchproject/opensearch:2.18.0
  #   container_name: opensearch
  #   environment:
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - opensearch-data:/usr/share/opensearch/data
  #   ports:
  #     - "9200:9200" # OpenSearch REST API
  #     - "9600:9600" # OpenSearch performance monitoring
  #   networks:
  #     app-network:
  #       # This is the host name used in OpenSearch scrape configuration.
  #       aliases: [opensearch]
  #
  # opensearch-dashboards:
  #   image: opensearchproject/opensearch-dashboards:2.18.0
  #   container_name: opensearch-dashboards
  #   environment:
  #     - 'OPENSEARCH_HOSTS=["https://opensearch:9200"]'
  #     - opensearch.username=admin
  #     - opensearch.password=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
  #   ports:
  #     - "5601:5601" # OpenSearch Dashboards UI
  #   networks:
  #     app-network:
  #       aliases: [opensearch-dashboards]

  # datadog-agent:
  #   image: datadog/agent:latest
  #   env_file:
  #   - docker.env
  #   volumes:
  #   - /var/run/docker.sock:/var/run/docker.sock:ro
  #   - /proc/:/host/proc/:ro
  #   - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  #   ports:
  #   - 8126:8126
  #   networks:
  #     - app-network
  #   environment:
  #   - DD_APM_ENABLED=true
  #   - DD_APM_NON_LOCAL_TRAFFIC=true
  #   - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
  #   - DD_AC_EXCLUDE=name:datadog-agent
  #   - DD_HOSTNAME=profiler-example
  #   cgroup: "host"
  #   pid: "host"

  jaeger:
    networks:
      - app-network
    image: jaegertracing/all-in-one:${JAEGER_IMAGE_TAG:-latest}
    volumes:
      - "./jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "16686:16686"

  otel_collector:
    networks:
      app-network:
        # This is the host name used in Prometheus scrape configuration.
        aliases: [spm_metrics_source]
    image: otel/opentelemetry-collector-contrib:${OTEL_IMAGE_TAG:-0.112.0}
    volumes:
      - ${OTEL_CONFIG_SRC:-./otel-collector-config-connector.yml}:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    depends_on:
      - jaeger
    ports:
      - "4318:4318"
      - "4317:4317"
      - "8889:8889"

  # microsim:
  #   networks:
  #     - app-network
  #   image: yurishkuro/microsim:v0.4.1
  #   command: "-d 24h -s 500ms"
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4318
  #     - OTEL_EXPORTER_OTLP_INSECURE=true
  #   depends_on:
  #     - otel_collector

  prometheus:
    networks:
      - app-network
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_USER: youtoo
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: youtoo
    networks:
      - app-network
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  seq:
    image: datalust/seq:latest
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORDHASH=${SEQ_FIRSTRUN_ADMINPASSWORDHASH}
    ports:
      - "8081:80"
      - "5341:5341"
    networks:
      - app-network
    restart: unless-stopped

  seq-input-gelf:
    image: datalust/seq-input-gelf:latest
    container_name: seq-input-gelf
    depends_on:
      - seq
    ports:
      - "12201:12201/udp"
    environment:
      SEQ_ADDRESS: "http://seq:5341"
      GELF_ENABLE_DIAGNOSTICS: "True"
      RUST_BACKTRACE: "full"
    networks:
      app-network:
        aliases: [seq-input-gelf]
    restart: unless-stopped

  adminer:
    image: adminer
    restart: always
    networks:
      - app-network
    environment:
      ADMINER_DESIGN: 'pepa-linha'
      ADMINER_DEFAULT_SERVER: 'postgres'
    ports:
      - 8080:8080

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app-network
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana

volumes:
  postgres_data:
  grafana-storage:
  opensearch-data:
networks:
  app-network:
    driver: bridge
